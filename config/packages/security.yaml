security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                csrf_token_generator: Symfony\Component\Security\Csrf\CsrfTokenManagerInterface
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret: '%kernel.secret%'
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        #- { path: ^/login$, roles: PUBLIC_ACCESS }  n'ouvrir que l'accés a login
        #- { path: ^/account/edit$, roles: IS_AUTHENTICATED_FULLY}  n'accéder à cette route que si il est complétement identifier (pas de rememberme)
        #- { path: ^/, roles: ROLE_USER } n'accède a rien si pas connecté (donc n'a accés qu'a la page de connexion)
        #- { path: ^/profile, roles: ROLE_USER }
    # role_hierarchy:
    #     ROLE_ADMIN: [ROLE_USER, ROLE_ALLOWED_TO_SWITCH, ROLE_VALIDATION]
    #     ROLE_USER: [ROLE_POST, ROLE_MANAGE, ROLE_CREATE]    

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
